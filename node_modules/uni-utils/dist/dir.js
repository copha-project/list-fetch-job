"use strict";

const createDir = async dirs => {
  if (!Array.isArray(dirs)) {
    dirs = [dirs];
  }

  for (let dir of dirs) {
    dir.split(require("path").sep).reduce((parentDir, childDir) => {
      const curDir = require("path").resolve(parentDir, childDir);

      try {
        require('fs').mkdirSync(curDir);
      } catch (err) {
        if (err.code === 'EEXIST') {
          // curDir already exists!
          return curDir;
        } // To avoid `EISDIR` error on Mac and `EACCES`-->`ENOENT` and `EPERM` on Windows.


        if (err.code === 'ENOENT') {
          // Throw the original parentDir error on curDir `ENOENT` failure.
          throw new Error(`EACCES: permission denied, mkdir '${parentDir}'`);
        }

        const caughtErr = ['EACCES', 'EPERM', 'EISDIR'].indexOf(err.code) > -1;

        if (!caughtErr || caughtErr && curDir === require("path").resolve(dir)) {
          throw err; // Throw if it's just the last created dir.
        }
      }

      return curDir;
    }, '/');
  }
};

exports.createDir = createDir;

const readDir = async p => {
  return require('fs').promises.readdir(p);
};

exports.readDir = readDir;

const copyDir = async (s, d) => {
  return new Promise((resolve, reject) => {
    require('child_process').execFile('cp', ["-R", s, d], (error, stdout, stderr) => {
      if (error) {
        reject(error);
      }

      resolve(stdout);
    });
  });
};

exports.copyDir = copyDir;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kaXIuanMiXSwibmFtZXMiOlsiY3JlYXRlRGlyIiwiZGlycyIsIkFycmF5IiwiaXNBcnJheSIsImRpciIsInNwbGl0IiwicmVxdWlyZSIsInNlcCIsInJlZHVjZSIsInBhcmVudERpciIsImNoaWxkRGlyIiwiY3VyRGlyIiwicmVzb2x2ZSIsIm1rZGlyU3luYyIsImVyciIsImNvZGUiLCJFcnJvciIsImNhdWdodEVyciIsImluZGV4T2YiLCJleHBvcnRzIiwicmVhZERpciIsInAiLCJwcm9taXNlcyIsInJlYWRkaXIiLCJjb3B5RGlyIiwicyIsImQiLCJQcm9taXNlIiwicmVqZWN0IiwiZXhlY0ZpbGUiLCJlcnJvciIsInN0ZG91dCIsInN0ZGVyciJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxTQUFTLEdBQUcsTUFBT0MsSUFBUCxJQUFnQjtBQUM5QixNQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixJQUFkLENBQUwsRUFBMEI7QUFDdEJBLElBQUFBLElBQUksR0FBRyxDQUFDQSxJQUFELENBQVA7QUFDSDs7QUFDRCxPQUFLLElBQUlHLEdBQVQsSUFBZ0JILElBQWhCLEVBQXNCO0FBQ2xCRyxJQUFBQSxHQUFHLENBQUNDLEtBQUosQ0FBVUMsT0FBTyxDQUFDLE1BQUQsQ0FBUCxDQUFnQkMsR0FBMUIsRUFBK0JDLE1BQS9CLENBQXNDLENBQUNDLFNBQUQsRUFBWUMsUUFBWixLQUF5QjtBQUMzRCxZQUFNQyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxNQUFELENBQVAsQ0FBZ0JNLE9BQWhCLENBQXdCSCxTQUF4QixFQUFtQ0MsUUFBbkMsQ0FBZjs7QUFDQSxVQUFJO0FBQ0FKLFFBQUFBLE9BQU8sQ0FBQyxJQUFELENBQVAsQ0FBY08sU0FBZCxDQUF3QkYsTUFBeEI7QUFDSCxPQUZELENBRUUsT0FBT0csR0FBUCxFQUFZO0FBQ1YsWUFBSUEsR0FBRyxDQUFDQyxJQUFKLEtBQWEsUUFBakIsRUFBMkI7QUFBRTtBQUN6QixpQkFBT0osTUFBUDtBQUNILFNBSFMsQ0FLVjs7O0FBQ0EsWUFBSUcsR0FBRyxDQUFDQyxJQUFKLEtBQWEsUUFBakIsRUFBMkI7QUFBRTtBQUN6QixnQkFBTSxJQUFJQyxLQUFKLENBQVcscUNBQW9DUCxTQUFVLEdBQXpELENBQU47QUFDSDs7QUFFRCxjQUFNUSxTQUFTLEdBQUcsQ0FBQyxRQUFELEVBQVcsT0FBWCxFQUFvQixRQUFwQixFQUE4QkMsT0FBOUIsQ0FBc0NKLEdBQUcsQ0FBQ0MsSUFBMUMsSUFBa0QsQ0FBQyxDQUFyRTs7QUFDQSxZQUFJLENBQUNFLFNBQUQsSUFBY0EsU0FBUyxJQUFJTixNQUFNLEtBQUtMLE9BQU8sQ0FBQyxNQUFELENBQVAsQ0FBZ0JNLE9BQWhCLENBQXdCUixHQUF4QixDQUExQyxFQUF3RTtBQUNwRSxnQkFBTVUsR0FBTixDQURvRSxDQUN6RDtBQUNkO0FBQ0o7O0FBQ0QsYUFBT0gsTUFBUDtBQUNILEtBcEJELEVBb0JHLEdBcEJIO0FBcUJIO0FBQ0osQ0EzQkQ7O0FBNEJBUSxPQUFPLENBQUNuQixTQUFSLEdBQW9CQSxTQUFwQjs7QUFFQSxNQUFNb0IsT0FBTyxHQUFHLE1BQU9DLENBQVAsSUFBYTtBQUN6QixTQUFPZixPQUFPLENBQUMsSUFBRCxDQUFQLENBQWNnQixRQUFkLENBQXVCQyxPQUF2QixDQUErQkYsQ0FBL0IsQ0FBUDtBQUNILENBRkQ7O0FBR0FGLE9BQU8sQ0FBQ0MsT0FBUixHQUFrQkEsT0FBbEI7O0FBRUEsTUFBTUksT0FBTyxHQUFHLE9BQU9DLENBQVAsRUFBVUMsQ0FBVixLQUFnQjtBQUM1QixTQUFPLElBQUlDLE9BQUosQ0FBWSxDQUFDZixPQUFELEVBQVNnQixNQUFULEtBQWtCO0FBQ2pDdEIsSUFBQUEsT0FBTyxDQUFDLGVBQUQsQ0FBUCxDQUF5QnVCLFFBQXpCLENBQWtDLElBQWxDLEVBQXVDLENBQUMsSUFBRCxFQUFPSixDQUFQLEVBQVVDLENBQVYsQ0FBdkMsRUFBcUQsQ0FBQ0ksS0FBRCxFQUFRQyxNQUFSLEVBQWdCQyxNQUFoQixLQUEyQjtBQUM5RSxVQUFJRixLQUFKLEVBQVc7QUFDVEYsUUFBQUEsTUFBTSxDQUFDRSxLQUFELENBQU47QUFDRDs7QUFDRGxCLE1BQUFBLE9BQU8sQ0FBQ21CLE1BQUQsQ0FBUDtBQUNELEtBTEQ7QUFNSCxHQVBNLENBQVA7QUFRSCxDQVREOztBQVVBWixPQUFPLENBQUNLLE9BQVIsR0FBa0JBLE9BQWxCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3JlYXRlRGlyID0gYXN5bmMgKGRpcnMpID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGlycykpIHtcbiAgICAgICAgZGlycyA9IFtkaXJzXVxuICAgIH1cbiAgICBmb3IgKGxldCBkaXIgb2YgZGlycykge1xuICAgICAgICBkaXIuc3BsaXQocmVxdWlyZShcInBhdGhcIikuc2VwKS5yZWR1Y2UoKHBhcmVudERpciwgY2hpbGREaXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1ckRpciA9IHJlcXVpcmUoXCJwYXRoXCIpLnJlc29sdmUocGFyZW50RGlyLCBjaGlsZERpcik7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlcXVpcmUoJ2ZzJykubWtkaXJTeW5jKGN1ckRpcik7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09ICdFRVhJU1QnKSB7IC8vIGN1ckRpciBhbHJlYWR5IGV4aXN0cyFcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1ckRpcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUbyBhdm9pZCBgRUlTRElSYCBlcnJvciBvbiBNYWMgYW5kIGBFQUNDRVNgLS0+YEVOT0VOVGAgYW5kIGBFUEVSTWAgb24gV2luZG93cy5cbiAgICAgICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09ICdFTk9FTlQnKSB7IC8vIFRocm93IHRoZSBvcmlnaW5hbCBwYXJlbnREaXIgZXJyb3Igb24gY3VyRGlyIGBFTk9FTlRgIGZhaWx1cmUuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRUFDQ0VTOiBwZXJtaXNzaW9uIGRlbmllZCwgbWtkaXIgJyR7cGFyZW50RGlyfSdgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjYXVnaHRFcnIgPSBbJ0VBQ0NFUycsICdFUEVSTScsICdFSVNESVInXS5pbmRleE9mKGVyci5jb2RlKSA+IC0xO1xuICAgICAgICAgICAgICAgIGlmICghY2F1Z2h0RXJyIHx8IGNhdWdodEVyciAmJiBjdXJEaXIgPT09IHJlcXVpcmUoXCJwYXRoXCIpLnJlc29sdmUoZGlyKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7IC8vIFRocm93IGlmIGl0J3MganVzdCB0aGUgbGFzdCBjcmVhdGVkIGRpci5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3VyRGlyO1xuICAgICAgICB9LCAnLycpXG4gICAgfVxufVxuZXhwb3J0cy5jcmVhdGVEaXIgPSBjcmVhdGVEaXJcblxuY29uc3QgcmVhZERpciA9IGFzeW5jIChwKSA9PiB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJ2ZzJykucHJvbWlzZXMucmVhZGRpcihwKVxufVxuZXhwb3J0cy5yZWFkRGlyID0gcmVhZERpclxuXG5jb25zdCBjb3B5RGlyID0gYXN5bmMgKHMsIGQpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e1xuICAgICAgICByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJykuZXhlY0ZpbGUoJ2NwJyxbXCItUlwiLCBzLCBkXSwgKGVycm9yLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlKHN0ZG91dClcbiAgICAgICAgfSlcbiAgICB9KVxufVxuZXhwb3J0cy5jb3B5RGlyID0gY29weURpclxuIl19