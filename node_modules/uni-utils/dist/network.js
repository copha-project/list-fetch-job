"use strict";

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const core = require('./core');

const {
  log
} = require('./core');

const file = require('./file');

const download = async (url, option = {}) => {
  const path = option.savePath || '';
  const options = {
    timeout: 30000
  };

  if (process.env.http_proxy) {
    options.agent = new require('https-proxy-agent')(process.env.http_proxy);
  }

  if (option.hasOwnProperty('proxy')) {
    options.agent = new require('https-proxy-agent')(option.proxy);
  }

  const fetch = (...args) => Promise.resolve().then(() => _interopRequireWildcard(require('node-fetch'))).then(({
    default: fetch
  }) => fetch(...args));

  const resp = await fetch(new URL(url), options);

  if (path) {
    const pipeline = require('util').promisify(require('stream').pipeline);

    const saveFile = require('fs').createWriteStream(path);

    return pipeline(resp.body, saveFile);
  } else {
    return resp.text();
  }
};

exports.download = download;
/*
    taskList array<object{
        downUrl
        savePath
    }>
    options object{
        timeGap: 1000 下载间隔
    }
*/

const listDownload = async (taskList, options) => {
  options = {
    timeGap: 1000,
    skipExist: true,
    ...options
  };
  return core.loopTask(taskList, async task => {
    if (options.skipExist && (await file.checkFile(task.savePath))) return;

    try {
      await download(task.downUrl, {
        savePath: task.savePath
      });
    } catch (e) {
      log('文件下载失败:', e.message, task.downUrl);
      task.error = e.message;
      return task;
    }

    if (task.i) {
      log(`下载完成:${task.i}/${taskList.length}`, task.downUrl);
    }
  }, options);
};

exports.listDownload = listDownload;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9uZXR3b3JrLmpzIl0sIm5hbWVzIjpbImNvcmUiLCJyZXF1aXJlIiwibG9nIiwiZmlsZSIsImRvd25sb2FkIiwidXJsIiwib3B0aW9uIiwicGF0aCIsInNhdmVQYXRoIiwib3B0aW9ucyIsInRpbWVvdXQiLCJwcm9jZXNzIiwiZW52IiwiaHR0cF9wcm94eSIsImFnZW50IiwiaGFzT3duUHJvcGVydHkiLCJwcm94eSIsImZldGNoIiwiYXJncyIsInRoZW4iLCJkZWZhdWx0IiwicmVzcCIsIlVSTCIsInBpcGVsaW5lIiwicHJvbWlzaWZ5Iiwic2F2ZUZpbGUiLCJjcmVhdGVXcml0ZVN0cmVhbSIsImJvZHkiLCJ0ZXh0IiwiZXhwb3J0cyIsImxpc3REb3dubG9hZCIsInRhc2tMaXN0IiwidGltZUdhcCIsInNraXBFeGlzdCIsImxvb3BUYXNrIiwidGFzayIsImNoZWNrRmlsZSIsImRvd25VcmwiLCJlIiwibWVzc2FnZSIsImVycm9yIiwiaSIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBO0FBQUQsSUFBUUQsT0FBTyxDQUFDLFFBQUQsQ0FBckI7O0FBQ0EsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxNQUFNRyxRQUFRLEdBQUcsT0FBT0MsR0FBUCxFQUFZQyxNQUFNLEdBQUMsRUFBbkIsS0FBMEI7QUFDdkMsUUFBTUMsSUFBSSxHQUFHRCxNQUFNLENBQUNFLFFBQVAsSUFBbUIsRUFBaEM7QUFDQSxRQUFNQyxPQUFPLEdBQUc7QUFDWkMsSUFBQUEsT0FBTyxFQUFFO0FBREcsR0FBaEI7O0FBR0EsTUFBSUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFVBQWhCLEVBQTRCO0FBQ3hCSixJQUFBQSxPQUFPLENBQUNLLEtBQVIsR0FBZ0IsSUFBSWIsT0FBSixDQUFZLG1CQUFaLEVBQWlDVSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsVUFBN0MsQ0FBaEI7QUFDSDs7QUFDRCxNQUFHUCxNQUFNLENBQUNTLGNBQVAsQ0FBc0IsT0FBdEIsQ0FBSCxFQUFrQztBQUM5Qk4sSUFBQUEsT0FBTyxDQUFDSyxLQUFSLEdBQWdCLElBQUliLE9BQUosQ0FBWSxtQkFBWixFQUFpQ0ssTUFBTSxDQUFDVSxLQUF4QyxDQUFoQjtBQUNIOztBQUVELFFBQU1DLEtBQUssR0FBRyxDQUFDLEdBQUdDLElBQUosS0FBYSw2REFBTyxZQUFQLElBQXFCQyxJQUFyQixDQUEwQixDQUFDO0FBQUNDLElBQUFBLE9BQU8sRUFBRUg7QUFBVixHQUFELEtBQXNCQSxLQUFLLENBQUMsR0FBR0MsSUFBSixDQUFyRCxDQUEzQjs7QUFDQSxRQUFNRyxJQUFJLEdBQUcsTUFBTUosS0FBSyxDQUFDLElBQUlLLEdBQUosQ0FBUWpCLEdBQVIsQ0FBRCxFQUFlSSxPQUFmLENBQXhCOztBQUVBLE1BQUlGLElBQUosRUFBVTtBQUNOLFVBQU1nQixRQUFRLEdBQUd0QixPQUFPLENBQUMsTUFBRCxDQUFQLENBQWdCdUIsU0FBaEIsQ0FBMEJ2QixPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCc0IsUUFBNUMsQ0FBakI7O0FBQ0EsVUFBTUUsUUFBUSxHQUFHeEIsT0FBTyxDQUFDLElBQUQsQ0FBUCxDQUFjeUIsaUJBQWQsQ0FBZ0NuQixJQUFoQyxDQUFqQjs7QUFDQSxXQUFPZ0IsUUFBUSxDQUFDRixJQUFJLENBQUNNLElBQU4sRUFBWUYsUUFBWixDQUFmO0FBQ0gsR0FKRCxNQUlLO0FBQ0QsV0FBT0osSUFBSSxDQUFDTyxJQUFMLEVBQVA7QUFDSDtBQUNKLENBdEJEOztBQXVCQUMsT0FBTyxDQUFDekIsUUFBUixHQUFtQkEsUUFBbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTTBCLFlBQVksR0FBRyxPQUFPQyxRQUFQLEVBQWlCdEIsT0FBakIsS0FBNkI7QUFDOUNBLEVBQUFBLE9BQU8sR0FBRztBQUFFdUIsSUFBQUEsT0FBTyxFQUFFLElBQVg7QUFBZ0JDLElBQUFBLFNBQVMsRUFBQyxJQUExQjtBQUFnQyxPQUFHeEI7QUFBbkMsR0FBVjtBQUNBLFNBQU9ULElBQUksQ0FBQ2tDLFFBQUwsQ0FBY0gsUUFBZCxFQUF3QixNQUFPSSxJQUFQLElBQWM7QUFDekMsUUFBSTFCLE9BQU8sQ0FBQ3dCLFNBQVIsS0FBcUIsTUFBTTlCLElBQUksQ0FBQ2lDLFNBQUwsQ0FBZUQsSUFBSSxDQUFDM0IsUUFBcEIsQ0FBM0IsQ0FBSixFQUE4RDs7QUFFOUQsUUFBSTtBQUNBLFlBQU1KLFFBQVEsQ0FBQytCLElBQUksQ0FBQ0UsT0FBTixFQUFlO0FBQUU3QixRQUFBQSxRQUFRLEVBQUUyQixJQUFJLENBQUMzQjtBQUFqQixPQUFmLENBQWQ7QUFDSCxLQUZELENBRUUsT0FBTzhCLENBQVAsRUFBVTtBQUNScEMsTUFBQUEsR0FBRyxDQUFDLFNBQUQsRUFBWW9DLENBQUMsQ0FBQ0MsT0FBZCxFQUF1QkosSUFBSSxDQUFDRSxPQUE1QixDQUFIO0FBQ0FGLE1BQUFBLElBQUksQ0FBQ0ssS0FBTCxHQUFhRixDQUFDLENBQUNDLE9BQWY7QUFDQSxhQUFPSixJQUFQO0FBQ0g7O0FBQ0QsUUFBR0EsSUFBSSxDQUFDTSxDQUFSLEVBQVU7QUFDTnZDLE1BQUFBLEdBQUcsQ0FBRSxRQUFPaUMsSUFBSSxDQUFDTSxDQUFFLElBQUdWLFFBQVEsQ0FBQ1csTUFBTyxFQUFuQyxFQUFzQ1AsSUFBSSxDQUFDRSxPQUEzQyxDQUFIO0FBQ0g7QUFDSixHQWJNLEVBYUo1QixPQWJJLENBQVA7QUFjSCxDQWhCRDs7QUFpQkFvQixPQUFPLENBQUNDLFlBQVIsR0FBdUJBLFlBQXZCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29yZSA9IHJlcXVpcmUoJy4vY29yZScpXG5jb25zdCB7bG9nfSA9IHJlcXVpcmUoJy4vY29yZScpXG5jb25zdCBmaWxlID0gcmVxdWlyZSgnLi9maWxlJylcblxuY29uc3QgZG93bmxvYWQgPSBhc3luYyAodXJsLCBvcHRpb249e30pID0+IHtcbiAgICBjb25zdCBwYXRoID0gb3B0aW9uLnNhdmVQYXRoIHx8ICcnXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgdGltZW91dDogMzAwMDBcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lmh0dHBfcHJveHkpIHtcbiAgICAgICAgb3B0aW9ucy5hZ2VudCA9IG5ldyByZXF1aXJlKCdodHRwcy1wcm94eS1hZ2VudCcpKHByb2Nlc3MuZW52Lmh0dHBfcHJveHkpXG4gICAgfVxuICAgIGlmKG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgncHJveHknKSl7XG4gICAgICAgIG9wdGlvbnMuYWdlbnQgPSBuZXcgcmVxdWlyZSgnaHR0cHMtcHJveHktYWdlbnQnKShvcHRpb24ucHJveHkpXG4gICAgfVxuXG4gICAgY29uc3QgZmV0Y2ggPSAoLi4uYXJncykgPT4gaW1wb3J0KCdub2RlLWZldGNoJykudGhlbigoe2RlZmF1bHQ6IGZldGNofSkgPT4gZmV0Y2goLi4uYXJncykpXG4gICAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKG5ldyBVUkwodXJsKSwgb3B0aW9ucylcblxuICAgIGlmIChwYXRoKSB7XG4gICAgICAgIGNvbnN0IHBpcGVsaW5lID0gcmVxdWlyZSgndXRpbCcpLnByb21pc2lmeShyZXF1aXJlKCdzdHJlYW0nKS5waXBlbGluZSlcbiAgICAgICAgY29uc3Qgc2F2ZUZpbGUgPSByZXF1aXJlKCdmcycpLmNyZWF0ZVdyaXRlU3RyZWFtKHBhdGgpXG4gICAgICAgIHJldHVybiBwaXBlbGluZShyZXNwLmJvZHksIHNhdmVGaWxlKVxuICAgIH1lbHNle1xuICAgICAgICByZXR1cm4gcmVzcC50ZXh0KClcbiAgICB9XG59XG5leHBvcnRzLmRvd25sb2FkID0gZG93bmxvYWRcbi8qXG4gICAgdGFza0xpc3QgYXJyYXk8b2JqZWN0e1xuICAgICAgICBkb3duVXJsXG4gICAgICAgIHNhdmVQYXRoXG4gICAgfT5cbiAgICBvcHRpb25zIG9iamVjdHtcbiAgICAgICAgdGltZUdhcDogMTAwMCDkuIvovb3pl7TpmpRcbiAgICB9XG4qL1xuY29uc3QgbGlzdERvd25sb2FkID0gYXN5bmMgKHRhc2tMaXN0LCBvcHRpb25zKSA9PiB7XG4gICAgb3B0aW9ucyA9IHsgdGltZUdhcDogMTAwMCxza2lwRXhpc3Q6dHJ1ZSwgLi4ub3B0aW9ucyB9XG4gICAgcmV0dXJuIGNvcmUubG9vcFRhc2sodGFza0xpc3QsIGFzeW5jICh0YXNrKT0+e1xuICAgICAgICBpZiAob3B0aW9ucy5za2lwRXhpc3QgJiYgYXdhaXQgZmlsZS5jaGVja0ZpbGUodGFzay5zYXZlUGF0aCkpIHJldHVyblxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBkb3dubG9hZCh0YXNrLmRvd25VcmwsIHsgc2F2ZVBhdGg6IHRhc2suc2F2ZVBhdGh9KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2coJ+aWh+S7tuS4i+i9veWksei0pTonLCBlLm1lc3NhZ2UsIHRhc2suZG93blVybClcbiAgICAgICAgICAgIHRhc2suZXJyb3IgPSBlLm1lc3NhZ2VcbiAgICAgICAgICAgIHJldHVybiB0YXNrXG4gICAgICAgIH1cbiAgICAgICAgaWYodGFzay5pKXtcbiAgICAgICAgICAgIGxvZyhg5LiL6L295a6M5oiQOiR7dGFzay5pfS8ke3Rhc2tMaXN0Lmxlbmd0aH1gLCB0YXNrLmRvd25VcmwpXG4gICAgICAgIH1cbiAgICB9LCBvcHRpb25zKVxufVxuZXhwb3J0cy5saXN0RG93bmxvYWQgPSBsaXN0RG93bmxvYWRcbiJdfQ==