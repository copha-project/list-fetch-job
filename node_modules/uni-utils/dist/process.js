"use strict";

const {
  sleep
} = require('./time');
/**
 * @see <https://nodejs.org/api/child_process.html#child_process_options_detached>
 */


const restartProcess = () => {
  const subp = require('child_process').spawn(process.argv[0], process.argv.splice(1), {
    detached: true,
    // the child process will be made the leader of a new process group and session
    stdio: "ignore" //When using the detached option to start a long-running process,the process will not stay running in the background after the parent exits unless it is provided with a stdio configuration that is not connected to the parent. If the parent's stdio is inherited, the child will remain attached to the controlling terminal.

  });

  subp.unref(); // By default, the parent will wait for the detached child to exit. To prevent the parent from waiting for a given subprocess to exit, use the subprocess.unref() method

  process.exit();
};

exports.restartProcess = restartProcess;

const createProcess = (file, args, env = {}) => {
  return new Promise((resolve, reject) => {
    const w = require('child_process').fork(file, args, {
      detached: true,
      stdio: ["ignore", "ignore", "pipe", "ipc"],
      env: { ...process.env,
        ...env
      }
    });

    let code = 0,
        msg = "";
    w.stderr.on('data', data => {
      msg = `${data}`;
    });
    w.on('exit', code => {
      reject({
        code,
        msg
      });
    });
    sleep(3000).then(() => {
      var _w$channel, _w$channel$unref;

      w.unref();
      (_w$channel = w.channel) === null || _w$channel === void 0 ? void 0 : (_w$channel$unref = _w$channel.unref) === null || _w$channel$unref === void 0 ? void 0 : _w$channel$unref.call(_w$channel);
      resolve(w);
    });
  });
};

exports.createProcess = createProcess;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9jZXNzLmpzIl0sIm5hbWVzIjpbInNsZWVwIiwicmVxdWlyZSIsInJlc3RhcnRQcm9jZXNzIiwic3VicCIsInNwYXduIiwicHJvY2VzcyIsImFyZ3YiLCJzcGxpY2UiLCJkZXRhY2hlZCIsInN0ZGlvIiwidW5yZWYiLCJleGl0IiwiZXhwb3J0cyIsImNyZWF0ZVByb2Nlc3MiLCJmaWxlIiwiYXJncyIsImVudiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidyIsImZvcmsiLCJjb2RlIiwibXNnIiwic3RkZXJyIiwib24iLCJkYXRhIiwidGhlbiIsImNoYW5uZWwiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVlDLE9BQU8sQ0FBQyxRQUFELENBQXpCO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxNQUFNQyxjQUFjLEdBQUcsTUFBTTtBQUN6QixRQUFNQyxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxlQUFELENBQVAsQ0FBeUJHLEtBQXpCLENBQStCQyxPQUFPLENBQUNDLElBQVIsQ0FBYSxDQUFiLENBQS9CLEVBQWdERCxPQUFPLENBQUNDLElBQVIsQ0FBYUMsTUFBYixDQUFvQixDQUFwQixDQUFoRCxFQUF3RTtBQUNqRkMsSUFBQUEsUUFBUSxFQUFFLElBRHVFO0FBQ2pFO0FBQ2hCQyxJQUFBQSxLQUFLLEVBQUUsUUFGMEUsQ0FFakU7O0FBRmlFLEdBQXhFLENBQWI7O0FBSUFOLEVBQUFBLElBQUksQ0FBQ08sS0FBTCxHQUx5QixDQUtaOztBQUNiTCxFQUFBQSxPQUFPLENBQUNNLElBQVI7QUFDSCxDQVBEOztBQVFBQyxPQUFPLENBQUNWLGNBQVIsR0FBeUJBLGNBQXpCOztBQUVBLE1BQU1XLGFBQWEsR0FBRyxDQUFDQyxJQUFELEVBQU9DLElBQVAsRUFBYUMsR0FBRyxHQUFHLEVBQW5CLEtBQTBCO0FBQzVDLFNBQU8sSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBU0MsTUFBVCxLQUFrQjtBQUNqQyxVQUFNQyxDQUFDLEdBQUduQixPQUFPLENBQUMsZUFBRCxDQUFQLENBQXlCb0IsSUFBekIsQ0FBOEJQLElBQTlCLEVBQW9DQyxJQUFwQyxFQUEwQztBQUNoRFAsTUFBQUEsUUFBUSxFQUFFLElBRHNDO0FBRWhEQyxNQUFBQSxLQUFLLEVBQUUsQ0FBQyxRQUFELEVBQVUsUUFBVixFQUFtQixNQUFuQixFQUEwQixLQUExQixDQUZ5QztBQUdoRE8sTUFBQUEsR0FBRyxFQUFDLEVBQ0EsR0FBR1gsT0FBTyxDQUFDVyxHQURYO0FBRUEsV0FBR0E7QUFGSDtBQUg0QyxLQUExQyxDQUFWOztBQVFBLFFBQUlNLElBQUksR0FBRyxDQUFYO0FBQUEsUUFDSUMsR0FBRyxHQUFHLEVBRFY7QUFFQUgsSUFBQUEsQ0FBQyxDQUFDSSxNQUFGLENBQVNDLEVBQVQsQ0FBWSxNQUFaLEVBQW1CQyxJQUFJLElBQUU7QUFDckJILE1BQUFBLEdBQUcsR0FBSSxHQUFFRyxJQUFLLEVBQWQ7QUFDSCxLQUZEO0FBR0FOLElBQUFBLENBQUMsQ0FBQ0ssRUFBRixDQUFLLE1BQUwsRUFBY0gsSUFBRCxJQUFVO0FBQ3JCSCxNQUFBQSxNQUFNLENBQUM7QUFBQ0csUUFBQUEsSUFBRDtBQUFNQyxRQUFBQTtBQUFOLE9BQUQsQ0FBTjtBQUNELEtBRkQ7QUFHQXZCLElBQUFBLEtBQUssQ0FBQyxJQUFELENBQUwsQ0FDQzJCLElBREQsQ0FDTSxNQUFJO0FBQUE7O0FBQ05QLE1BQUFBLENBQUMsQ0FBQ1YsS0FBRjtBQUNBLG9CQUFBVSxDQUFDLENBQUNRLE9BQUYsOEVBQVdsQixLQUFYO0FBQ0FRLE1BQUFBLE9BQU8sQ0FBQ0UsQ0FBRCxDQUFQO0FBQ0gsS0FMRDtBQU1ILEdBdkJNLENBQVA7QUF3QkgsQ0F6QkQ7O0FBMEJBUixPQUFPLENBQUNDLGFBQVIsR0FBd0JBLGFBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBzbGVlcCB9ID0gcmVxdWlyZSgnLi90aW1lJylcbi8qKlxuICogQHNlZSA8aHR0cHM6Ly9ub2RlanMub3JnL2FwaS9jaGlsZF9wcm9jZXNzLmh0bWwjY2hpbGRfcHJvY2Vzc19vcHRpb25zX2RldGFjaGVkPlxuICovXG5jb25zdCByZXN0YXJ0UHJvY2VzcyA9ICgpID0+IHtcbiAgICBjb25zdCBzdWJwID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduKHByb2Nlc3MuYXJndlswXSwgcHJvY2Vzcy5hcmd2LnNwbGljZSgxKSwge1xuICAgICAgICBkZXRhY2hlZDogdHJ1ZSwgLy8gdGhlIGNoaWxkIHByb2Nlc3Mgd2lsbCBiZSBtYWRlIHRoZSBsZWFkZXIgb2YgYSBuZXcgcHJvY2VzcyBncm91cCBhbmQgc2Vzc2lvblxuICAgICAgICBzdGRpbzogXCJpZ25vcmVcIiAvL1doZW4gdXNpbmcgdGhlIGRldGFjaGVkIG9wdGlvbiB0byBzdGFydCBhIGxvbmctcnVubmluZyBwcm9jZXNzLHRoZSBwcm9jZXNzIHdpbGwgbm90IHN0YXkgcnVubmluZyBpbiB0aGUgYmFja2dyb3VuZCBhZnRlciB0aGUgcGFyZW50IGV4aXRzIHVubGVzcyBpdCBpcyBwcm92aWRlZCB3aXRoIGEgc3RkaW8gY29uZmlndXJhdGlvbiB0aGF0IGlzIG5vdCBjb25uZWN0ZWQgdG8gdGhlIHBhcmVudC4gSWYgdGhlIHBhcmVudCdzIHN0ZGlvIGlzIGluaGVyaXRlZCwgdGhlIGNoaWxkIHdpbGwgcmVtYWluIGF0dGFjaGVkIHRvIHRoZSBjb250cm9sbGluZyB0ZXJtaW5hbC5cbiAgICB9KVxuICAgIHN1YnAudW5yZWYoKSAvLyBCeSBkZWZhdWx0LCB0aGUgcGFyZW50IHdpbGwgd2FpdCBmb3IgdGhlIGRldGFjaGVkIGNoaWxkIHRvIGV4aXQuIFRvIHByZXZlbnQgdGhlIHBhcmVudCBmcm9tIHdhaXRpbmcgZm9yIGEgZ2l2ZW4gc3VicHJvY2VzcyB0byBleGl0LCB1c2UgdGhlIHN1YnByb2Nlc3MudW5yZWYoKSBtZXRob2RcbiAgICBwcm9jZXNzLmV4aXQoKVxufVxuZXhwb3J0cy5yZXN0YXJ0UHJvY2VzcyA9IHJlc3RhcnRQcm9jZXNzXG5cbmNvbnN0IGNyZWF0ZVByb2Nlc3MgPSAoZmlsZSwgYXJncywgZW52ID0ge30pID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e1xuICAgICAgICBjb25zdCB3ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLmZvcmsoZmlsZSwgYXJncywge1xuICAgICAgICAgICAgZGV0YWNoZWQ6IHRydWUsXG4gICAgICAgICAgICBzdGRpbzogW1wiaWdub3JlXCIsXCJpZ25vcmVcIixcInBpcGVcIixcImlwY1wiXSxcbiAgICAgICAgICAgIGVudjp7XG4gICAgICAgICAgICAgICAgLi4ucHJvY2Vzcy5lbnYsXG4gICAgICAgICAgICAgICAgLi4uZW52XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGxldCBjb2RlID0gMCxcbiAgICAgICAgICAgIG1zZyA9IFwiXCJcbiAgICAgICAgdy5zdGRlcnIub24oJ2RhdGEnLGRhdGE9PntcbiAgICAgICAgICAgIG1zZyA9IGAke2RhdGF9YFxuICAgICAgICB9KVxuICAgICAgICB3Lm9uKCdleGl0JywgKGNvZGUpID0+IHtcbiAgICAgICAgICByZWplY3Qoe2NvZGUsbXNnfSlcbiAgICAgICAgfSlcbiAgICAgICAgc2xlZXAoMzAwMClcbiAgICAgICAgLnRoZW4oKCk9PntcbiAgICAgICAgICAgIHcudW5yZWYoKVxuICAgICAgICAgICAgdy5jaGFubmVsPy51bnJlZj8uKClcbiAgICAgICAgICAgIHJlc29sdmUodylcbiAgICAgICAgfSlcbiAgICB9KVxufVxuZXhwb3J0cy5jcmVhdGVQcm9jZXNzID0gY3JlYXRlUHJvY2Vzc1xuIl19